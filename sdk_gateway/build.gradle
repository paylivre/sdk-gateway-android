import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'jacoco'
    id 'maven-publish'
    id "com.dicedmelon.gradle.jacoco-android"
    id("org.jetbrains.dokka") version "1.6.21"
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    jvmArgs = ["--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED"]
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories.setFrom(files([mainSrc]))
//    classDirectories.setFrom(files([debugTree]))
//    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
//    ]))
//}


android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
//            testCoverageEnabled true
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}



ext {
    coroutines = "1.5.1"
    fragment_version = "1.4.1"
    sentry_version = "5.6.1"
    nav_version = "2.4.2"
    koin_version = '3.2.0'
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'

    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.test:core-ktx:1.4.0'
    implementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.github.razir.progressbutton:progressbutton:2.1.0'

    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.json:json:20180813'
    implementation 'com.lambdapioneer.argon2kt:argon2kt:1.3.0'
    testImplementation 'io.mockk:mockk:1.12.0'

    testImplementation 'org.robolectric:robolectric:4.6'
    
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1")

    //To generate barcode
    implementation 'com.google.zxing:core:3.4.0'

    //To imagePicker
    implementation 'com.github.dhaval2404:imagepicker:2.1'

    implementation("com.squareup.picasso:picasso:2.8")

    //Sentry
    implementation "io.sentry:sentry-android:$sentry_version"
    implementation "io.sentry:sentry-android-okhttp:$sentry_version"
    implementation "io.sentry:sentry-android-fragment:$sentry_version"

    implementation 'com.amplitude:android-sdk:2.23.2'

    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.6.21")

    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")

    // Koin Core features
    implementation "io.insert-koin:koin-core:$koin_version"
    // Koin Test features
    testImplementation "io.insert-koin:koin-test:$koin_version"
    // Koin for JUnit 4
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"
    // Koin for JUnit 5
    testImplementation "io.insert-koin:koin-test-junit5:$koin_version"

    // Koin main features for Android
    implementation "io.insert-koin:koin-android:$koin_version"
    // No more koin-android-viewmodel, koin-android-scope, koin-android-fragment

    // Java Compatibility
    implementation "io.insert-koin:koin-android-compat:$koin_version"
    // Jetpack WorkManager
    implementation "io.insert-koin:koin-androidx-workmanager:$koin_version"
    // Navigation Graph
    implementation "io.insert-koin:koin-androidx-navigation:$koin_version"

    //Koin bugfix fix on Android 12
    implementation 'androidx.work:work-runtime-ktx:2.7.0'

    //LiveData
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.fragment:fragment-ktx:1.3.0"

    //Tests
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.3"
}

afterEvaluate {
    publishing {
        publications{
            release(MavenPublication){
                from components.release
                groupId = 'com.paylivre'
                artifactId = 'sdk_gateway_android'
                version = '1.0'
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    testLogging {
        events "failed"
    }
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}

configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

jacocoAndroidUnitTestReport {
    excludes += ['**/DataBinderMapperImpl.*',
                 '**/DataBind*.*'
    ]
}